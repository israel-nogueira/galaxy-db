#!/usr/bin/env php
<?php
class cli{
	static public function parseArgs($argv = null){
		$argv = $argv ? $argv : $_SERVER['argv'];
		array_shift($argv);
		$o = [];
		for ($i = 0, $j = count($argv); $i < $j; $i++) {
			$a = $argv[$i];
			if (substr($a, 0, 2) == '--') {
				$eq = strpos($a, '=');
				if ($eq !== false) {
					$o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1);
				} else {
					$k = substr($a, 2);
					if ($i + 1 < $j && $argv[$i + 1][0] !== '-') {
						$o[$k] = $argv[$i + 1];
						$i++;
					} elseif (!isset($o[$k])) {
						$o[$k] = true;
					}
				}
			} elseif (substr($a, 0, 1) == '-') {
				if (substr($a, 2, 1) == '=') {
					$o[substr($a, 1, 1)] = substr($a, 3);
				} else {
					foreach (str_split(substr($a, 1)) as $k) {
						if (!isset($o[$k])) {
							$o[$k] = true;
						}
					}
					if ($i + 1 < $j && $argv[$i + 1][0] !== '-') {
						$o[$k] = $argv[$i + 1];
						$i++;
					}
				}
			} else {
				$o[] = $a;
			}
		}
		return $o;
	}

    static public function processCommands($_ARGS=null) {try{
		if(is_null($_ARGS)) throw new Exception("Param is null em classe::methodo", 1);
		$_PARAM = self::parseArgs($_ARGS);
        print_r($_PARAM);
		// if(count($_PARAM)==0 || (count($_PARAM)==1 && (isset($_PARAM['v']) || isset($_PARAM['version'])))){	self::getVersion();			}
		// if(count($_PARAM)==1 && (isset($_PARAM['h']) || isset($_PARAM['help']))){		self::getHelp();			}
		// if(count($_PARAM)==1 && (isset($_PARAM['setStatusSystem']))){					self::setStatusSystem();	}
		// if(count($_PARAM)==1 && (isset($_PARAM['offlineAllUsers']))){					self::offlineAllUsers();	}
		// if(count($_PARAM)==1 && (isset($_PARAM['accessMySQL']))){						self::accessMySQL();		}
		// if(count($_PARAM)==1 && (isset($_PARAM['localhost']))){							self::localhost();			}
		// if(count($_PARAM)==1 && (isset($_PARAM['novoModulo']))){						self::novoModulo();			}
		// if(count($_PARAM)==1 && (isset($_PARAM['novoProjeto']))){						self::novoProjeto();		}
		// if(count($_PARAM)==1 && (isset($_PARAM['setProject']))){						self::setProjectPath();		}

		
	} catch (\Throwable $ERROR) {die(globals::wsReturn($ERROR->getMessage(),0));}}
}
cli::processCommands($argv);