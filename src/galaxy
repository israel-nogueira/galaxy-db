#!/usr/bin/env php
<?php
include(__DIR__.'/../../../autoload.php');
use IsraelNogueira\galaxyDB\galaxyDB;

/**
 * -------------------------------------------------------------------------
 *		@author Israel Nogueira <israel@feats.com>
 *		@package library
 *		@license GPL-3.0-or-later
 *		@copyright 2023 Israel Nogueira
 * -------------------------------------------------------------------------
 * 
 * 		Classe responsável por configurar a conexão e criar snippets
 * 
 * -------------------------------------------------------------------------
 */


class cli{

	/* 
	|--------------------------------------------------------------------------------
	| PROCESSA OS ARGUMENTOS DO CLI
	|--------------------------------------------------------------------------------
	|
	|	Não sei se vamos usar muito, pois o CLI do composer é um pouco diferente
	|	
	*/

	static public function parseArgs($argv = null){
		$argv = $argv ? $argv : $_SERVER['argv'];
		array_shift($argv);
		$o = [];
		for ($i = 0, $j = count($argv); $i < $j; $i++) {
			$a = $argv[$i];
			if (substr($a, 0, 2) == '--') {
				$eq = strpos($a, '=');
				if ($eq !== false) {
					$o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1);
				} else {
					$k = substr($a, 2);
					if ($i + 1 < $j && $argv[$i + 1][0] !== '-') {
						$o[$k] = $argv[$i + 1];
						$i++;
					} elseif (!isset($o[$k])) {
						$o[$k] = true;
					}
				}
			} elseif (substr($a, 0, 1) == '-') {
				if (substr($a, 2, 1) == '=') {
					$o[substr($a, 1, 1)] = substr($a, 3);
				} else {
					foreach (str_split(substr($a, 1)) as $k) {
						if (!isset($o[$k])) {
							$o[$k] = true;
						}
					}
					if ($i + 1 < $j && $argv[$i + 1][0] !== '-') {
						$o[$k] = $argv[$i + 1];
						$i++;
					}
				}
			} else {
				$o[] = $a;
			}
		}
		return $o;
	}

	/* 
	|--------------------------------------------------------------------------------
	| MODELO PADRÃO DA MODEL
	|--------------------------------------------------------------------------------
	|
	|	
	*/

	static public function modeloModel($modelo='myClass') {

		return '<?
			namespace IsraelNogueira\Models;
			use IsraelNogueira\galaxyDB\galaxyDB;

			class '.$modelo.' extends galaxyDB{

				protected $table				=  "'.$modelo.'";
				protected $columnsBlocked		= [];
				protected $columnsEnabled		= [];
				protected $functionsBlocked		= [];
				protected $functionsEnabled		= [];
				protected $charactersEnabled	= [];
				protected $charactersBlocked	= [];

				public function exemplo_de_extend_function() {
					return $this->join("LEFT", "minha_tabela minha"," minha.code='.$modelo.'.code");
				}

			}

		?>';

	}

	/* 
	|--------------------------------------------------------------------------------
	| CORES DOS OUTPUTS DA CLI
	|--------------------------------------------------------------------------------
	|
	|	
	*/
	static public function color($cor='vermelho',$_TEXT=null) {try{
		//ˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑ
			$_COLOR['branco']	="\033[0;97m";
			$_COLOR['preto']	="\033[0;30m";
			$_COLOR['vermelho'] ="\033[0;31m";
			$_COLOR['verde']    ="\033[0;32m";
			$_COLOR['amarelo']	="\033[0;33m";
			$_COLOR['azul']     ="\033[0;34m";
			$_COLOR['magenta']  ="\033[0;35m";
			$_COLOR['ciano']    ="\033[0;36m";
			$_COLOR['roxo']   	="\033[0;35m";
			$_COLOR['cinza']  	="\033[1;30m";
			$_COLOR['end']		="\033[0m";
			return $_COLOR[$cor] . $_TEXT.  $_COLOR['end'];
		//ˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑˑ
	} catch (\Throwable $ERROR) {die(print_r($ERROR->getMessage(),0));}}

	static public function formatarString($str) {
		$str = preg_replace_callback('/[\p{L} ]/u', function ($match) {return str_replace(' ', '', iconv('UTF-8', 'ASCII//TRANSLIT', $match[0]));}, $str);
		$str = ucwords($str);
		$str = str_replace([' ', '-'], '', $str);
		$str = lcfirst($str);
		return $str;
	}

	/* 
	|--------------------------------------------------------------------------------
	| CRIA O ARQUIVO DE CONEXÃO .ENV NA CLASSE
	|--------------------------------------------------------------------------------
	|
	|	
	*/

    static public function createEnv($_DATA) {
		$_StringFile = ''
						.PHP_EOL.'DB_HOST='.$_DATA['host']
						.PHP_EOL.'DB_PORT='.($_DATA['port']??'3306')
						.PHP_EOL.'DB_DATABASE='.$_DATA['name']
						.PHP_EOL.'DB_TYPE='.$_DATA['type']
						.PHP_EOL.'DB_USERNAME='.$_DATA['user']
						.PHP_EOL.'DB_PASSWORD='.$_DATA['pass']
						.PHP_EOL.'DB_CHAR='.($_DATA['char']??'')
						.PHP_EOL.'DB_FLOW='.($_DATA['flow']??'')
						.PHP_EOL.'DB_FKEY='.($_DATA['fkey']??'');
		file_put_contents(__DIR__.DIRECTORY_SEPARATOR.'.env',$_StringFile);
		echo self::color('verde','Configurações salvas com sucesso!').PHP_EOL;				

	}

	/* 
	|--------------------------------------------------------------------------------
	| CRIANDO SNIPPETS
	|--------------------------------------------------------------------------------
	|
	|	
	*/

    static public function createSnippet() {
		$showTables			= new galaxyDB();
		$Tables				= $showTables->showDBTables();
		$_SNIPPET_TABELAS	= [];
		$_SNIPPET_TABELAS["Galaxy: TableName"]	=["prefix"=>["Tables","tblNm"],"body"=>['${1|'.implode(',',$Tables).'|}']];
		$_SNIPPET_TABELAS["Galaxy: ->table()"]	=["prefix"=>["->table"],"body"=>['${1|->table("'.implode('");,->table("',$Tables).'");|}']];
		$_SNIPPET_TABELAS["Galaxy: Lista tabelas"]	=["prefix"=>["tables", "tabelas", "lista"],"body"=>['/*'.PHP_EOL.'	•'.implode(PHP_EOL.'	•',$Tables).PHP_EOL.'*/']];
		
		$showColunms		= new galaxyDB();
		foreach ($Tables as $_table) {
			$_colunas = $showColunms->showDBColumns($_table);
			$_SNIPPET_TABELAS[$_table.' ColumName']=["description"=>"Colunas da tabela:\n\n• ".$_table,									"prefix"=>['colum','clmNm','clmNm_'.$_table],"body"	=>['${1|'.implode(',',$_colunas).'|}']];
			$_SNIPPET_TABELAS[$_table.' ->colum()']=["description"=>"Colunas da tabela:\n\n• ".$_table."\n\nObs.: Em formato de fun ",	"prefix"=>['->colum','->colum_'.$_table],"body"	=>['${1|->colum("'.implode('");,->colum("',$_colunas).'");|}']];
			$_SNIPPET_TABELAS[$_table.' Lista colunas']=["prefix"=>['lista','columns','colunas'],"body"	=>['/*'.PHP_EOL.'	Colunas da tabela "'.$_table.'":'.PHP_EOL.'	•'.implode(PHP_EOL.'	•',$_colunas).PHP_EOL.'*/']];
		}
		
		$showProcedures		= new galaxyDB();
		$Procedures			= $showProcedures->showProcedures();
		
		$_MainProcidures =[];
		foreach ($Procedures as $_SP) {
			$_MainProcidures[] =  $_SP['Name'];
		}
		
		$_SNIPPET_TABELAS['Galaxy: ->sp_()']=["prefix"=>['->sp_'],"body"	=>['${1|->sp_'.implode('();,->sp_',$_MainProcidures).'|}']];
		$_SNIPPET_TABELAS['Galaxy: ProcidureName']=["prefix"=>['sp','spName'],"body"	=>['${1|'.implode(',',$_MainProcidures).'|}']];
		$_SNIPPET_TABELAS['Galaxy: Lista Procidures']=["prefix"=>['lista','procidures','sp'],"body"	=>['/*'.PHP_EOL.'	Procedures:'.PHP_EOL.'	•'.implode(PHP_EOL.'	•',$_MainProcidures).PHP_EOL.'*/']];

		return json_encode($_SNIPPET_TABELAS,JSON_PRETTY_PRINT);

	}

	/* 
	|--------------------------------------------------------------------------------
	| CONFIGURANDO PSR-4
	|--------------------------------------------------------------------------------
	|
	|	
	|	
	*/
    static public function configPSR4() {
		echo self::color('cinza','Verificando PSR-4...').PHP_EOL;
		echo self::color('cinza','Verificando Pre-Push...').PHP_EOL;
		
		$PATH		= str_replace('\\',DIRECTORY_SEPARATOR,realpath(__DIR__.'/../../../../'));
		$JSON		= $PATH.DIRECTORY_SEPARATOR.'composer.json';
		
		
		$PRE_PUSH	= $PATH.DIRECTORY_SEPARATOR.'.git/hooks/pre-push.sh';
		if(file_exists($PATH.DIRECTORY_SEPARATOR.'.git/hooks')){
			if(!file_exists($PATH.DIRECTORY_SEPARATOR.'.git/hooks/pre-push.sh')){
				copy(__DIR__.'/pre-push.sh',$PATH.DIRECTORY_SEPARATOR.'.git/hooks/pre-push.sh');
				echo self::color('verde','Pre-Push instalado').PHP_EOL;
			}
		}

		$_COMPOSER	= json_decode(file_get_contents($JSON),true);
		$PSR4		= (isset($_COMPOSER['autoload']['psr-4']['IsraelNogueira\Models\\']))?$_COMPOSER['autoload']['psr-4']['IsraelNogueira\Models\\']:'app/Models';
		if(!file_exists($PATH.DIRECTORY_SEPARATOR.$PSR4)){
			@mkdir($PATH.DIRECTORY_SEPARATOR.$PSR4,0777,true);
			echo self::color('verde','Path PSR-4 criado').PHP_EOL;
		}
		
		if(
			empty($_COMPOSER['autoload']) || 
			empty($_COMPOSER['autoload']['psr-4']) ||
			empty($_COMPOSER['autoload']['psr-4']['IsraelNogueira\Models\\'])
		){
				echo self::color('cinza','Adicionando path Models').PHP_EOL;
				$_COMPOSER['autoload']['psr-4']["IsraelNogueira\\Models\\"] = 'app/Models/';
				file_put_contents($JSON, json_encode($_COMPOSER,JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES));
				echo self::color('verde','composer.json atualizado').PHP_EOL;
		}


		return $_COMPOSER;
	}


	/* 
	|--------------------------------------------------------------------------------
	| PROCESSA OS COMANDOS QUE VEM VIA CLI
	|--------------------------------------------------------------------------------
	|
	|	
	|	
	*/
	
    static public function processCommands($_ARGS=null) {
		if(is_null($_ARGS)) throw new Exception("Param is null em classe::methodo", 1);
		$PATH		= str_replace('\\',DIRECTORY_SEPARATOR,realpath(__DIR__.'/../../../../'));
		$_PARAMS	= self::parseArgs($_ARGS);

		$_COMPOSER = self::configPSR4();

		if($_PARAMS[0]=='config-connection'){
			unset($_PARAMS[0]);
			if(		
					!array_key_exists('type',$_PARAMS) 
				||	!array_key_exists('user',$_PARAMS) 
				||	!array_key_exists('pass',$_PARAMS) 
				||	!array_key_exists('name',$_PARAMS) 
				||	!array_key_exists('host',$_PARAMS)
			){
				echo self::color('vermelho','Ops, está faltando alguns dados.').PHP_EOL.PHP_EOL;
				echo self::color('amarelo','Execute o seguinte comando, substituindo com seus dados:').PHP_EOL;				
				echo self::color('cinza','|=====================================================================================================').PHP_EOL;
				echo self::color('cinza','|').PHP_EOL; 
				echo self::color('cinza','|	composer run-script galaxy config-connection -- --type=mysql --user=root --pass= --name=meuDB --host=localhost --port= --char= --flow= --fkey=').PHP_EOL;
				echo self::color('cinza','|').PHP_EOL;
				echo self::color('cinza','|=====================================================================================================').PHP_EOL;
			}else{
				echo self::createEnv($_PARAMS);
			};
			exit;
		}

		if($_PARAMS[0]=='update-snippets'){
			echo self::color('amarelo','Atualizando atalhos GalaxyDB').PHP_EOL;
			$_pathSnippet = str_replace('\\',DIRECTORY_SEPARATOR,realpath(__DIR__.'/../../../../'));
			@mkdir($_pathSnippet.'/.vscode',0777,true);
			$_dbSnippet = str_replace(['\\','/'],DIRECTORY_SEPARATOR,$_pathSnippet.'/.vscode/galaxy-db.code-snippets');
			$_galaxySnippet1 = str_replace(['\\','/'],DIRECTORY_SEPARATOR,$_pathSnippet.'/vendor/israel-nogueira/galaxy-db/.vscode/galaxy.code-snippets');
			$_galaxySnippet2 = str_replace(['\\','/'],DIRECTORY_SEPARATOR,$_pathSnippet.'/.vscode/galaxy.code-snippets');
			copy($_galaxySnippet1,$_galaxySnippet2);
			file_put_contents($_dbSnippet, self::createSnippet());
			echo self::color('verde','Atalhos atualizados com sucesso!').PHP_EOL;
			exit;
		}

		if($_PARAMS[0]=='new-model'){
			unset($_PARAMS[0]);	
			foreach ($_PARAMS as $value) {
				$Classe = $PATH.DIRECTORY_SEPARATOR.$_COMPOSER['autoload']['psr-4']["IsraelNogueira\\Models\\"].DIRECTORY_SEPARATOR.self::formatarString($value).'.php';
				file_put_contents($Classe, self::modeloModel($value));
				echo self::color('amarelo','Criando model "'.$value.'"').PHP_EOL;
			}
			$output = shell_exec('composer dump-autoload');
			die(self::color('verde',$output));
		}
	}

}

cli::processCommands($argv);